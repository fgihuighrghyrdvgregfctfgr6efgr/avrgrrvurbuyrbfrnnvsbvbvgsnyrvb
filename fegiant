local Plr = game:GetService("Players").LocalPlayer -- you
local Player = game:GetService("Players").LocalPlayer-- you
local Character = Player.Character-- your character
local armhat1 = Character:WaitForChild("AccessoryAccessory")
local armhat2 = Character:WaitForChild("Bang w bun")

armhat1.Name = "Arm1"
armhat2.Name = "Arm2"
wait(1)



local DuplicateHats = {
    DuplicateHat1 = Character:WaitForChild("Arm1"),
    DuplicateHat2 = Character:WaitForChild("Arm2")
}
wait(1)

local Hats = {
    Leg1 = Character:WaitForChild("AccessoryAccessory"),
    Leg2 = Character:WaitForChild("Bang w bun"),
    Torso = Character:WaitForChild("Cyber Peacock Tail 2.0")
} -- the hat/body limb name

DuplicateHats.DuplicateHat1.Name = "ArmHat1"
DuplicateHats.DuplicateHat2.Name = "ArmHat2"
Hats.Leg1.Name = "Leg1"
Hats.Leg2.Name = "Leg2"
wait(1)
DuplicateHats.DuplicateHat1.Handle.SpecialMesh:Remove()
wait(.5)
DuplicateHats.DuplicateHat2.Handle.SpecialMesh:Remove()
Hats.Leg1.Handle.SpecialMesh:Remove()
Hats.Leg2.Handle.SpecialMesh:Remove()
Hats.Torso.Handle.SpecialMesh:Remove()
wait(6)

HumanDied = false
loadstring(game:HttpGet(('https://raw.githubusercontent.com/XeneonPlays/Nexo/main/NexoReanimate'),true))()

IT = Instance.new
CF = CFrame.new
VT = Vector3.new
RAD = math.rad
C3 = Color3.new
UD2 = UDim2.new
BRICKC = BrickColor.new
ANGLES = CFrame.Angles
EULER = CFrame.fromEulerAnglesXYZ
COS = math.cos
ACOS = math.acos
SIN = math.sin
ASIN = math.asin
ABS = math.abs
MRANDOM = math.random
FLOOR = math.floor

speed = 1
sine = 1
srv = game:GetService('RunService')

function setuptrail(parent,Pos1,Pos2,Color,LT,LE,Texture)
IT = Instance.new
local Part1 = parent
local A1 = IT("Attachment",Part1)
A1.Position = Pos1
A1.Name = "ATH10"
local B1 = IT("Attachment",Part1)
B1.Position = Pos2
B1.Name = "ATH11"
local Trail1 = IT("Trail",Part1)
Trail1.Name = "Nexo Trail"
Trail1.Color = Color
Trail1.Attachment0 = B1
Trail1.Attachment1 = A1
Trail1.Lifetime = LT
Trail1.LightEmission = LE
Trail1.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0),NumberSequenceKeypoint.new(1, 1)})
Trail1.Texture = Texture
Trail1.Enabled = true
end

--                          |
--put the setup trail below v

--put the hat script converted below

reanim = game.Players.LocalPlayer.Character
RJ = reanim.HumanoidRootPart.RootJoint
RS = reanim.Torso['Right Shoulder']
LS = reanim.Torso['Left Shoulder']
RH = reanim.Torso['Right Hip']
LH = reanim.Torso['Left Hip']
Root = reanim.HumanoidRootPart
NECK = reanim.Torso.Neck
NECK.C0 = CF(0,1,0)*ANGLES(RAD(0),RAD(0),RAD(0))
NECK.C1 = CF(0,-0.5,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RJ.C1 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RJ.C0 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RS.C1 = CF(-0.5,0.5,0)*ANGLES(RAD(0),RAD(0),RAD(0))
LS.C1 = CF(0.5,0.5,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RH.C1 = CF(0,1,0)*ANGLES(RAD(0),RAD(0),RAD(0))
LH.C1 = CF(0,1,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RH.C0 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
LH.C0 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RS.C0 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
LS.C0 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))

coroutine.wrap(function()
while true do -- anim changer
reanim['Cyber Peacock Tail 2.0'].Handle.AccessoryWeld.Part1 = reanim['Torso']
reanim['Cyber Peacock Tail 2.0'].Handle.AccessoryWeld.C1 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
reanim['Cyber Peacock Tail 2.0'].Handle.AccessoryWeld.C0 = reanim['Cyber Peacock Tail 2.0'].Handle.AccessoryWeld.C0:Lerp(CF(0+0*math.cos(sine/13),0+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(-90+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13))),.1)
reanim['Leg1'].Handle.AccessoryWeld.Part1 = reanim['Right Leg']
reanim['Leg1'].Handle.AccessoryWeld.C1 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
reanim['Leg1'].Handle.AccessoryWeld.C0 = reanim['Leg1'].Handle.AccessoryWeld.C0:Lerp(CF(0+0*math.cos(sine/13),0+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13))),.1)
reanim['Leg2'].Handle.AccessoryWeld.Part1 = reanim['Left Leg']
reanim['Leg2'].Handle.AccessoryWeld.C1 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
reanim['Leg2'].Handle.AccessoryWeld.C0 = reanim['Leg2'].Handle.AccessoryWeld.C0:Lerp(CF(0+0*math.cos(sine/13),0+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13))),.1)
reanim['ArmHat1'].Handle.AccessoryWeld.Part1 = reanim['Right Arm']
reanim['ArmHat1'].Handle.AccessoryWeld.C1 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
reanim['ArmHat1'].Handle.AccessoryWeld.C0 = reanim['ArmHat1'].Handle.AccessoryWeld.C0:Lerp(CF(0+0*math.cos(sine/13),0+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13))),.1)
reanim['ArmHat2'].Handle.AccessoryWeld.Part1 = reanim['Left Arm']
reanim['ArmHat2'].Handle.AccessoryWeld.C1 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
reanim['ArmHat2'].Handle.AccessoryWeld.C0 = reanim['ArmHat2'].Handle.AccessoryWeld.C0:Lerp(CF(0+0*math.cos(sine/13),0+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13))),.1)
if HumanDied then break end
sine = sine + speed
if Root.Velocity.y > 1 then -- jump
NECK.C0 = NECK.C0:Lerp(CF(0+0*math.cos(sine/13),2+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(8+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
RJ.C0 = RJ.C0:Lerp(CF(0+0*math.cos(sine/13),3+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
RS.C0 = RS.C0:Lerp(CF(2.5+0*math.cos(sine/13),0.5+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(124+0*math.sin(sine/6)),RAD(0+0*math.cos(sine/13)),RAD(11+4*math.sin(sine/13))),.1)
LS.C0 = LS.C0:Lerp(CF(-2.5+0*math.cos(sine/13),0.5+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(124+0*math.sin(sine/6)),RAD(0+0*math.cos(sine/13)),RAD(-11+-4*math.sin(sine/13))),.1)
RH.C0 = RH.C0:Lerp(CF(1+0*math.cos(sine/13),-3+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/6)),RAD(0+0*math.cos(sine/13)),RAD(12+0*math.sin(sine/13))),.1)
LH.C0 = LH.C0:Lerp(CF(-1+0*math.cos(sine/13),-3+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/6)),RAD(0+0*math.cos(sine/13)),RAD(-12+0*math.sin(sine/13))),.1)
elseif Root.Velocity.y < -1 then -- fall
NECK.C0 = NECK.C0:Lerp(CF(0+0*math.cos(sine/13),2+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(8+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
RJ.C0 = RJ.C0:Lerp(CF(0+0*math.cos(sine/13),3+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(-35+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
RS.C0 = RS.C0:Lerp(CF(2.5+0*math.cos(sine/13),0.5+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(124+0*math.sin(sine/6)),RAD(0+0*math.cos(sine/13)),RAD(11+4*math.sin(sine/13))),.1)
LS.C0 = LS.C0:Lerp(CF(-2.5+0*math.cos(sine/13),0.5+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(124+0*math.sin(sine/6)),RAD(0+0*math.cos(sine/13)),RAD(-11+-4*math.sin(sine/13))),.1)
RH.C0 = RH.C0:Lerp(CF(1+0*math.cos(sine/13),-3+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/6)),RAD(0+0*math.cos(sine/13)),RAD(12+0*math.sin(sine/13))),.1)
LH.C0 = LH.C0:Lerp(CF(-1+0*math.cos(sine/13),-3+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/6)),RAD(0+0*math.cos(sine/13)),RAD(-12+0*math.sin(sine/13))),.1)
elseif Root.Velocity.Magnitude < 2 then -- idle
NECK.C0 = NECK.C0:Lerp(CF(0+0*math.cos(sine/13),2+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
RJ.C0 = RJ.C0:Lerp(CF(0+0*math.cos(sine/13),3+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
RS.C0 = RS.C0:Lerp(CF(2.5+0*math.cos(sine/13),0.5+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(11+4*math.sin(sine/13))),.1)
LS.C0 = LS.C0:Lerp(CF(-2.5+0*math.cos(sine/13),0.5+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(-11+-4*math.sin(sine/13))),.1)
RH.C0 = RH.C0:Lerp(CF(1+0*math.cos(sine/13),-3+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(4+0*math.sin(sine/13))),.1)
LH.C0 = LH.C0:Lerp(CF(-1+0*math.cos(sine/13),-3+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(-4+0*math.sin(sine/13))),.1)
elseif Root.Velocity.Magnitude < 11 then -- walk
NECK.C0 = NECK.C0:Lerp(CF(0+0*math.cos(sine/13),2+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
RJ.C0 = RJ.C0:Lerp(CF(0+0*math.cos(sine/13),3+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
RS.C0 = RS.C0:Lerp(CF(2.5+0*math.cos(sine/13),0.5+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+15*math.sin(sine/10)),RAD(0+0*math.cos(sine/13)),RAD(11+4*math.sin(sine/13))),.1)
LS.C0 = LS.C0:Lerp(CF(-2.5+0*math.cos(sine/13),0.5+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+-15*math.sin(sine/10)),RAD(0+0*math.cos(sine/13)),RAD(-11+-4*math.sin(sine/13))),.1)
RH.C0 = RH.C0:Lerp(CF(1+0*math.cos(sine/13),-3+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+-15*math.sin(sine/10)),RAD(0+0*math.cos(sine/13)),RAD(4+0*math.sin(sine/13))),.1)
LH.C0 = LH.C0:Lerp(CF(-1+0*math.cos(sine/13),-3+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+15*math.sin(sine/10)),RAD(0+0*math.cos(sine/13)),RAD(-4+0*math.sin(sine/13))),.1)
elseif Root.Velocity.Magnitude > 11 then -- run
NECK.C0 = NECK.C0:Lerp(CF(0+0*math.cos(sine/13),2+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(8+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
RJ.C0 = RJ.C0:Lerp(CF(0+0*math.cos(sine/13),3+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(-10+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
RS.C0 = RS.C0:Lerp(CF(2.5+0*math.cos(sine/13),0.5+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+33*math.sin(sine/6)),RAD(10+0*math.cos(sine/13)),RAD(11+4*math.sin(sine/13))),.1)
LS.C0 = LS.C0:Lerp(CF(-2.5+0*math.cos(sine/13),0.5+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+-33*math.sin(sine/6)),RAD(-10+0*math.cos(sine/13)),RAD(-11+-4*math.sin(sine/13))),.1)
RH.C0 = RH.C0:Lerp(CF(1+0*math.cos(sine/13),-3+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+-33*math.sin(sine/6)),RAD(0+0*math.cos(sine/13)),RAD(4+0*math.sin(sine/13))),.1)
LH.C0 = LH.C0:Lerp(CF(-1+0*math.cos(sine/13),-3+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+33*math.sin(sine/6)),RAD(0+0*math.cos(sine/13)),RAD(-4+0*math.sin(sine/13))),.1)
end
srv.RenderStepped:Wait()
end
end)()
--Created using Nexo Animator
wait(.1)
game.Players.LocalPlayer.Character.Humanoid.JumpPower = 65
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 10
local userInput = game:GetService("UserInputService")

local players = game:GetService("Players")



local sprintSpeed = 20

local walkSpeed = 10



local player = players.LocalPlayer



local function beginSprint(input, gameProcessed)

    if not gameProcessed then        

        if input.UserInputType == Enum.UserInputType.Keyboard then

            local keycode = input.KeyCode

            if keycode == Enum.KeyCode.Q then 

                player.Character.Humanoid.WalkSpeed = sprintSpeed

            end

        end

    end

end



local function endSprint(input, gameProcessed)

    if not gameProcessed then

        if input.UserInputType == Enum.UserInputType.Keyboard then

            local keycode = input.KeyCode

            if keycode == Enum.KeyCode.Q then

                player.Character.Humanoid.WalkSpeed = walkSpeed

            end

        end

    end

end



userInput.InputBegan:Connect(beginSprint)

userInput.InputEnded:Connect(endSprint)

game:GetService("Workspace").CurrentCamera.CameraSubject = reanim.Humanoid
wait(1)
game:GetService("Workspace").Camera.CameraOffset = Vector3.new(0,4,0)
